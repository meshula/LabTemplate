cmake_minimum_required(VERSION 3.10)

# Set the project name
project(Lab)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# create an app options variable, on apple it'll have MACOSX_BUNDLE
if (APPLE)
    # Add the MACOSX_BUNDLE option to make this a macOS GUI application
    # If one doesn't do this, when running within Xcode, the application will run in the terminal,
    # and a second time under Xcode, which is very confusing.
    set(APP_OPTIONS MACOSX_BUNDLE)
else()
    set(APP_OPTIONS "")
endif()

# LabMetal is a macOS only application, so we'll only build it on macOS
if(APPLE)
    set(src src/main.mm)

    # append src/Modes.cpp and src/RGFW_ODR to src
    list(APPEND src 
        src/Modes.cpp 
        src/RGFW-Metal.c)

    # Add the executable, using src.
    add_executable(LabMetal ${APP_OPTIONS} ${src})

    # add preprocessor definition, HAVE_NO_USD
    target_compile_definitions(LabMetal PRIVATE 
        HAVE_NO_USD)

    # add src as an include directory
    target_include_directories(LabMetal PUBLIC src)

    target_link_libraries(LabMetal "-framework Metal" "-framework Foundation" "-framework AppKit" "-framework Cocoa" "-framework CoreVideo" "-framework QuartzCore")

    # add an installation step
    install(TARGETS LabMetal DESTINATION bin)
endif()

set(src src/main.cpp)

# append src/Modes.cpp and src/RGFW_ODR to src
list(APPEND src 
    src/LabApplicationEngine.cpp
    src/Modes.cpp
    src/RGFW-GL.c
    src/imgui/imgui.cpp
    src/imgui/imgui_draw.cpp
    src/imgui/imgui_widgets.cpp
    src/imgui/imgui_demo.cpp
    src/imgui/imgui_tables.cpp
    src/imgui/backends/imgui_impl_opengl2.cpp
)

add_executable(LabGL ${APP_OPTIONS} ${src})

# add preprocessor definition, HAVE_NO_USD
target_compile_definitions(LabGL PRIVATE 
    HAVE_NO_USD)

# add src and src/imgui as include directories
target_include_directories(LabGL PUBLIC src src/imgui)

if(APPLE)
    # Metal
    target_link_libraries(LabGL "-framework OpenGL" "-framework Metal" "-framework Foundation" "-framework AppKit" "-framework Cocoa" "-framework CoreVideo" "-framework QuartzCore")
elseif(UNIX)
    # OpenGL, todo vulkan.
    target_link_libraries(LabGL "-lXrandr" "-lX11" "-lm" "-lGL" "-ldl" "-lpthread")
elseif(WIN32)
    # OpenGL, todo dx11
    target_link_libraries(LabGL "-lopengl32" "-lgdi32" "-lwinmm")
endif()

# add an installation step
install(TARGETS LabGL DESTINATION bin)
